const http = require('http');

// Create a simple HTTP server
const server = http.createServer((req, res) => {
  // Set CORS headers
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
  
  // Handle OPTIONS requests (preflight)
  if (req.method === 'OPTIONS') {
    res.writeHead(200);
    res.end();
    return;
  }
  
  // Handle test endpoint
  if (req.url === '/api/test' && req.method === 'GET') {
    const testResponse = {
      status: 'ok',
      message: 'API is running',
      timestamp: new Date().toISOString(),
      environment: {
        NODE_ENV: process.env.NODE_ENV || 'development',
        OPENAI_API_KEY_CONFIGURED: Boolean(process.env.OPENAI_API_KEY),
      },
      request: {
        method: req.method,
        url: req.url,
        headers: req.headers,
      }
    };
    
    res.writeHead(200, { 'Content-Type': 'application/json' });
    res.end(JSON.stringify(testResponse, null, 2));
    return;
  }
  
  // Handle chat endpoint
  if (req.url === '/api/chat' && req.method === 'POST') {
    let body = '';
    
    req.on('data', (chunk) => {
      body += chunk.toString();
    });
    
    req.on('end', () => {
      let requestData;
      try {
        requestData = JSON.parse(body);
        console.log('Received request:', requestData);
        
        // Mock response
        const mockResponse = {
          content: `This is a mock response to your question: "${requestData.message}". In a real deployment, this would be generated by OpenAI.`,
          model: requestData.modelId || 'gpt-4o',
        };
        
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify(mockResponse, null, 2));
      } catch (error) {
        console.error('Error parsing request:', error);
        res.writeHead(400, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({ error: 'Invalid request body' }));
      }
    });
    
    return;
  }
  
  // Handle 404
  res.writeHead(404, { 'Content-Type': 'application/json' });
  res.end(JSON.stringify({ error: 'Not found' }));
});

const PORT = 3000;
server.listen(PORT, () => {
  console.log(`Mock API server running at http://localhost:${PORT}`);
  console.log(`Test endpoint: http://localhost:${PORT}/api/test`);
  console.log(`Chat endpoint: http://localhost:${PORT}/api/chat (POST)`);
  console.log('Press Ctrl+C to stop the server');
}); 